#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

//const int N = 100003;
////开一个哈希表的槽,与槽上面相应的链
//int h[N], e[N], ne[N], idx;
//
//
////开放寻址法
// 
//
//
//
///**********************拉链法**********************/
////将数插入哈希表 
//void insert(int x)
//{
//	//设置一个哈希函数将x映射过去
//	int k = (x % N + N) % N;//这里的是为了保证k是一个正整数
//	//插入操作与单链表的插入操作一致
//	e[idx] = x, ne[idx] = h[k], h[k] = idx, idx++;
//	//h[k]返回的是当前槽中数的个数 
//}
//
////查找哈希表中的数
//bool find(int x)
//{
//	int k = (x % N + N) % N;//这里的是为了保证k是一个正整数,获得x所在的哈希表的槽
//	for (int i = h[k]; i != -1; i = ne[i])
//		if (e[i] == x)
//			return true;
//
//	return false; 
//}
///**********************拉链法**********************/
//
//
///**********************开放寻址法**********************/
//
//
//
//
///**********************开放寻址法**********************/
//
//
//
//
//
//int main()
//{
//	 //求一个大于100,000 的质数
//	for (int i = 100000; ; i++)
//	{
//		bool flag = true;
//		for (int j = 2; j * j <= i; j++)
//		{
//			if (i % j == 0)//如果i 能够整除j 说明i不是质数,直接跳出循环
//			{
//				flag = false;
//				break;
//			}
//		}
//
//		if (flag)
//		{
//			cout << i << endl;
//			//找到了第一个满足要求的质数就跳出循环
//			break;
//		}
//
//		//将h[N]中所有的槽的值清空,空指针一般用-1 来表示
//		memset(h, -1, sizeof h);
//
//
//
//
//	}
//
//
//
//
//
//	return 0;
//}


/**********************笔记**********************/
/* 1. 哈希表
	a. 哈希表的存储结构(根据冲突的处理方式 划分)
		* 开放寻址法
		* 拉链法
	b. 字符串哈希方式

*/

//用scanf读入字符串,scanf会自动忽略空格,制表符一般不用scanf读字符串

/*如何理解 负数 mod N
C++ 中负数模上负数还是负数
正数摸上正数还是正数
*/

/**********************笔记**********************/