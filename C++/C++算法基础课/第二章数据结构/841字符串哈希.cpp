#include <iostream>
#include <algorithm>
 
using namespace std;

////用ull表示某一个类型的变量
//typedef unsigned long long int ULL;
//
////p值为经验值
//const int N = 100010, P = 131;
////n为字符串的长度
//int n, m;
//
//char str[N];
//ULL h[N], p[N];
//
////返回字符串子串的哈希值
////l, r是目标子串的坐标
//ULL get(int l, int r)
//{
//	return h[r] - h[l - 1] * p[r - l + 1];
//}
//
//int main()
//{
//	//p的零次方为1 
//	p[0] = 1;
//	for (int i = 1; i <= n; i++)
//	{
//		p[i] = p[i - 1] * P;
//		//返回字母个数为i的前缀和的字符串的哈希值;
//		h[i] = h[i - 1] * P + str[i];
//	}
//	return 0;
//}
//



/**********************笔记**********************/ 
/*注意*/
//1. 不能将某个字母映射为数字0;
//2. 这里的字符串哈希是假定不同的字符串不存在冲突
//(完全 不考虑冲突的情况,但是会有经验值做参考);

/*好处是什么*/
//可以利用字符串前缀的哈希计算字串的哈希;

//KMP 能求字符串的循环节;哈希做法不行

/**********************笔记**********************/